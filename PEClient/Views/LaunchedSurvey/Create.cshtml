@*
    **********************************************************************************
    * Copyright (c) 2019 Robin Murray
    **********************************************************************************
    *
    * File: Index.cshtml
    *
    * Description: View for  LaunchController
    *
    * Author: Robin Murray
    *
    **********************************************************************************
    *
    * Granting License: The MIT License (MIT)
    *
    *   Permission is hereby granted, free of charge, to any person obtaining a copy
    *   of this software and associated documentation files (the "Software"), to deal
    *   in the Software without restriction, including without limitation the rights
    *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    *   copies of the Software, and to permit persons to whom the Software is
    *   furnished to do so, subject to the following conditions:
    *   The above copyright notice and this permission notice shall be included in
    *   all copies or substantial portions of the Software.
    *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    *   THE SOFTWARE.
    *
    **********************************************************************************
*@

@model  PEClient.Models.LaunchedSurveyCreateViewModel

@{
    ViewBag.Title = "Launch Survey";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-sm sc-container">
    <div class="dsh-title">
        <h2>Launch a Survey</h2>
    </div>

    <div class="dsh-content">
        <div class="dsh-content-image">
            <img src="~/Content/images/kyle-hinkson-xyXcGADvAwE-unsplash.jpg" style="width: 100%" />
        </div>

        @* -- Validation Summary -- *@

        @if (IsPost)
        {
            <div class="alert alert-danger">@Html.ValidationSummary("Errors")</div>
        }

        @using (Html.BeginForm("Create", "LaunchedSurvey", FormMethod.Post, new { @class = "form-launch" }))
        {
            @Html.AntiForgeryToken()
            @* -- Launch Name -- *@

            @Html.LabelFor(m => m.LaunchName, "Launch Name", new { @class = "control-label" })<br />
            @Html.ValidationMessageFor(m => m.LaunchName, "", new { @class = "alert-danger validation-msg" })
            @Html.TextBoxFor(m => m.LaunchName, new
            {
                @class = "form-control",
                title = "Enter a descriptive name for the this peer evaluation cycle",
                autofocus = "",
                placeholder = "Enter name for Launch",
                required = true
            })
            <br>

            @* -- Surveys list -- *@

            @Html.LabelFor(m => m.SurveyId, "Survey", new { @class = "control-label" })<br />
            @Html.ValidationMessageFor(m => m.SurveyId, "", new { @class = "alert-danger validation-msg" })

            <select name="SurveyId" class="form-control flex-grow-1">
                <option value="0">-- select a survey --</option>
                @foreach (var survey in Model.Surveys)
                {
                    if (survey.Id == Model.SurveyId)
                    {
                        <option value="@survey.Id" selected>@survey.Name</option>
                    }
                    else
                    {
                        <option value="@survey.Id">@survey.Name</option>
                    }
                }
            </select>
            <br>

            @* -- Start DateTime -- *@

            @Html.LabelFor(m => m.StartDateTime, "Start date and time", new { @class = "control-label" })<br />
            @Html.TextBoxFor(m => m.StartDateTime, new { id = "start-date-time", @class = "form-control", required = true })
            @Html.ValidationMessageFor(m => m.StartDateTime, "", new { @class = "alert-danger validation-msg" })
            <br>

            @* -- End DateTime -- *@

            @Html.LabelFor(m => m.EndDateTime, "End date and time", new { @class = "control-label" })<br />
            @Html.TextBoxFor(m => m.EndDateTime, new { id = "end-date-time", @class = "form-control", required = true })
            @Html.ValidationMessageFor(m => m.EndDateTime, "", new { @class = "alert-danger validation-msg" })
            <hr>

            @* -- Add Team DropDown -- *@

            @Html.LabelFor(m => m.SelectedTeams, "Peer Groups", new { @class = "control-label" })<br />
            @Html.ValidationMessageFor(m => m.SelectedTeams, "", new { @class = "alert-danger validation-msg" })

            <div class="d-flex team-add-students">
                <select id="SelectedTeam" name="SelectedTeam" class="form-control flex-grow-1">
                    <option value="">-- select a peer group then press &lt;Add&gt; --</option>
                    @foreach (var team in Model.Teams)
                    {
                        <option value="@team.Id">@team.Name</option>
                    }
                </select>


                @* -- Add User Button -- *@

                <button type="button" id="btn-add-team" class="btn btn-primary" name="action" value="add-user" onclick="ShowRow();" style="margin-left: 5px; display: inline;">
                    Add
                </button>
            </div>

            @* -- Hidden Team listbox -- *@

            if (Model.SelectedTeams == null)
            {
                Model.SelectedTeams = new List<int>
                    ();
            }
            <select id="SelectedTeams" name="SelectedTeams" class="form-control" style="display: none" multiple>
                @foreach (var team in Model.Teams)
                {
                    if (Model.SelectedTeams.Contains(team.Id))
                    {
                        <option value="@team.Id" selected></option>
                    }
                    else
                    {
                        <option value="@team.Id"></option>
                    }
                }
            </select>

            @* -- Peer Group table -- *@

            <div class="table-responsive-md">
                <table id="tbl-edit-team" class="table table-bordered table-hover tbl-team-create-edit">
                    <thead class="thead-dark thead-team-create-edit">
                        <tr>
                            <th class="table-header">Name</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var team in Model.Teams)
                        {
                            <tr id="tr-@(team.Id)" style="display: none" class="table-warning">
                                <td id="td-@(team.Id)">@team.Name</td>
                                <td>
                                    <a data-row-id="@(team.Id)"
                                       href="#0"
                                       onclick="deleteRow(event)"
                                       class="badge badge-primary badge-letter-spacing">delete</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>


            @* -- Submit and Cancel buttons -- *@

            @Html.Partial("~/Views/Shared/_SubmitAndCancel.cshtml", new ViewDataDictionary { { "Submit", "Launch Survey" } })
        }
    </div><!-- dsh-content -->

</div><!-- container -->

@section scripts{

    <script>

        $(document).ready(function () {
            $('#start-date-time').datetimepicker();
            $('#end-date-time').datetimepicker();
            UpdateTableFromListbox();
        })

        // Transfers model data from hidden listbox into
        // table containing peers who have been selected
        function UpdateTableFromListbox() {
            // Cycle through selected listbox items
            $("#SelectedTeams option:selected").each(function () {
                // Use the peers user ID to denote a row in the table
                var userId = $(this).val();
                $(`#tr-${userId}`).css("display", "table-row");
            });
        }

        // Shows the row corresponding to a selected peers user ID
        function ShowRow() {

            var userId = $("#SelectedTeam").val();

            if ("0" != userId) {

                var tableRow = $(`#tr-${userId}`);

                if (tableRow.css("display") == "table-row") {
                    var name = $(`#SelectedTeam option[value='${userId}']`).text();
                    alert(name + " has already been added!");
                    return;
                }

                tableRow.css("display", "table-row");

                // Select the list item in the hidden listbox specified by User ID
                $(`#SelectedTeams option[value='${userId}']`).prop("selected", true);
            }
        }

        // Deletes a row from the table and prevents the anchor from firing.
        function deleteRow(event) {

            var userId = event.target.getAttribute('data-row-id');
            var rowToDelete = `#tr-${userId}`;
            $(rowToDelete).css("display", "none");
            event.preventDefault();

            // Deselect the list item in the hidden listbox specified by User ID
            $(`#SelectedTeams option[value='${userId}']`).prop("selected", false);
        }
    </script>
}
